function par = save_modal_mex( z0 , par )
global par_mex

fprintf( 'generate modal_mex... \n' )
par.elapsed_time = [ par.elapsed_time toc( par.timer ) ] ;
toc( par.timer )

% par_mex
par_mex = par.par_mex ;

string_1 = [
	'function [ TMT , TKT , TVT ] = EOM_modal ( z )' newline ...
	'global par_mex' newline ...
	'z = [ z 0*z ]'' ;' newline ...
	newline ...
	'[ z , par_mex ] = dyn_mid_step( par_mex.t_equil_i , z , par_mex ) ;' newline ... % integration mid-step
	newline ...
	'TKT = fj_k_matF( par_mex.var , z ) ; ' newline ... % state stiffness/input
	'TVT = fj_vd_matF( par_mex.var , z ) ;' newline ] ;

string_all = [ string_1 newline ...
    'TMT = zeros(' num2str(par.nq) ',' num2str(par.nq) ') ;' newline ] ;

[rom_mass, rom_sprdmp] = romF(par.var, z0') ; % no need for real-time evaluation
for i = 1 : par.n_m
    string_all = [ string_all newline ...
        's0 = 1e-6 ;' newline ...
        'ds = ' num2str( rom_mass(i) ) ' / par_mex.n_int ;' newline ...
        'if ' num2str( rom_mass(i) ) ' == 0 ; ds = 1 ; s0 = 0 ; end' newline ...
        'for s = s0 : ds : ' num2str( rom_mass(i) ) ' - s0' newline ...
        '    [ M , T ] = massF' num2str(i) '( par_mex.var , z , s ) ;' newline ...
        '    TMT = TMT + T.'' * M * T * ds ;' newline ...
        'end' newline ] ;
end

for i = par.nq + 1 : par.n_sd
    string_all = [ string_all newline ...
        's0 = 1e-6 ;' newline ...
        'ds = ' num2str( rom_sprdmp(i) ) ' / par_mex.n_int ;' newline ...
        'if ' num2str( rom_sprdmp(i) ) ' == 0 ; ds = 1 ; s0 = 0 ; end' newline ...
        'for s = s0 : ds : ' num2str( rom_sprdmp(i) ) ' - s0' newline ...
        '    [ Tt , ~ , ~ , ~ , ~ , k_mat , v_mat ] = sprdmpF' num2str(i) '( par_mex.var , z , s ) ;' newline ...
        '    TKT = TKT + Tt * k_mat * ds ;' newline ...
        '    TVT = TVT + Tt * v_mat * ds ;' newline ...
        'end' newline ] ;
end

%  write m-file
EOM_m = fopen( 'eom/EOM_modal.m', 'wt' ) ;
fprintf( EOM_m , string_all ) ;
fclose( EOM_m ) ;
% mex
if par.modal == 2
    vars_mex = { zeros( 1 , ( par.nq + par.nlambda + par.ngamma ) ) } ;    
    scfg = coder.config('single');
    cd eom
    codegen EOM_modal -args vars_mex
    cd ..
end

fprintf( 'mex file generated. continue... \n' )
par.elapsed_time = [ par.elapsed_time toc( par.timer ) ] ;
toc( par.timer )


